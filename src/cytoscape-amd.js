// import Vue from 'vue'

export default function register (cytoscape) {

  let events = false    // tracks event handler registration

  cytoscape('core', 'addEdge', addEdge)
  cytoscape('collection', 'auxNode', auxNode)

  /**
   * @param   assoc   dm5.ViewAssoc or array of dm5.ViewAssoc
   */
  function addEdge (assoc) {
    // console.log('addEdge', assoc)
    eventHandlers(this)
    if (Array.isArray(assoc)) {
      assoc.forEach(assoc => _addEdge(this, assoc))
    } else {
      _addEdge(this, assoc)
    }
  }

  /**
   * @param   assoc   dm5.ViewAssoc
   */
  function _addEdge (cy, assoc) {
    const id1 = nodeId(cy, assoc.role1)
    const id2 = nodeId(cy, assoc.role2)
    const edge = cy.add(cyEdge(assoc, id1, id2))
    const p1 = cy.getElementById(id1.toString()).position()
    const p2 = cy.getElementById(id2.toString()).position()
    // Vue.nextTick(() => {
    // const e = cy.getElementById(edge.id())
    // x,y of edge.midpoint(), edge.sourceEndpoint(), edge.targetEndpoint() are undefined. Why?
    // console.log('_addEdge', p1, p2, e.midpoint(), e.sourceEndpoint(), e.targetEndpoint())
    const color = edge.data('color')
    const midpoint = {
      x: (p1.x + p2.x) / 2,
      y: (p1.y + p2.y) / 2
    }
    // console.log('_addEdge', edge.id(), midpoint, color)
    // create aux node to represent edge
    const auxNode = cy.add({
      // Note: the aux node ID is generated by Cytoscape (string). IDs of aux nodes are not relevant to the renderer.
      // The renderer recognizes an aux node by having "assocId" data.
      data: {
        assocId: edge.id(),    // holds original edge ID. Needed by context menu.
        color
      },
      position: midpoint
    })
    edge.data('nodeId', auxNode.id())    // linking back
    // })
  }

  function eventHandlers (cy) {
    // console.log('eventHandlers')
    if (!events) {
      cy.on('position', position)
      cy.on('remove', 'edge[color]', e => e.target.auxNode().remove())    // remove aux node when removing edge
      events = true
    }
  }

  function position (e) {
    const node = e.target
    if (!node.isNode()) {
      throw Error('Unexpected position event target')
    }
    // reposition aux nodes
    node.connectedEdges().forEach(edge => {
      e.cy.getElementById(edge.data('nodeId')).position(edge.midpoint())
    })
  }
}

/**
 * Builds a Cytoscape edge from a dm5.ViewAssoc
 *
 * Prerequisite: viewAssoc has 2 topic players specified by-ID. ### FIXDOC
 *
 * @param   viewAssoc   A dm5.ViewAssoc
 */
function cyEdge (viewAssoc, id1, id2) {
  return {
    data: {
      id:      viewAssoc.id,
      typeUri: viewAssoc.typeUri,   // TODO: needed?
      label:   viewAssoc.value,
      color:   viewAssoc.getColor(),
      source:  id1,
      target:  id2,
      viewAssoc
    }
  }
}

/**
 * @return    the ID of the node that represents the given player.
 *            For a topic player that is the topic ID (number), for an assoc player
 *            that is the ID of the assoc's aux node (string)
 */
function nodeId (cy, player) {
  const playerId = player.id
  if (player.isTopicPlayer()) {
    return playerId
  }
  const edge = cy.getElementById(playerId.toString())
  if (edge.size() !== 1) {
    throw Error(`Edge ${playerId} not in graph`)
  }
  return auxNodeId(edge)
}

/**
 * Prerequisite: "this" refers to an edge.
 *
 * @return  the aux node (a one-element Cytoscape collection) that represents the given edge.
 */
function auxNode () {
  const edge = this
  if (!edge || !edge.isEdge()) {
    throw Error(`auxNode() expects to be called on an edge, but called on ${JSON.stringify(edge)}`)
  }
  const auxNode = edge.cy().getElementById(auxNodeId(edge))
  if (auxNode.size() !== 1) {
    throw Error(`No aux node for edge ${edge.id()}`)
  }
  return auxNode
}

function auxNodeId (edge) {
  const auxNodeId = edge.data('nodeId')
  if (!auxNodeId) {
    throw Error(`Edge ${edge.id()} has no "nodeId" data`)
  }
  return auxNodeId
}
