// import Vue from 'vue'

let events = false    // tracks event handler registration

export default cytoscape => {
  cytoscape('core', 'addEdge', addEdge)
  cytoscape('collection', 'auxNode', auxNode)
}

/**
 * @param   assoc   dm5.ViewAssoc or array of dm5.ViewAssoc
 */
function addEdge (assoc) {
  // console.log('addEdge', assoc)
  eventHandlers(this)
  if (Array.isArray(assoc)) {
    assoc.forEach(assoc => _addEdge(this, assoc))
  } else {
    _addEdge(this, assoc)
  }
}

/**
 * @param   assoc   dm5.ViewAssoc
 */
function _addEdge (cy, assoc) {
  const id1 = nodeId(cy, assoc.role1)
  const id2 = nodeId(cy, assoc.role2)
  const edge = cy.add(cyEdge(assoc, id1, id2))
  const p1 = cy.getElementById(id1.toString()).position()
  const p2 = cy.getElementById(id2.toString()).position()
  // Vue.nextTick(() => {
  // const e = cy.getElementById(edge.id())
  // x,y of edge.midpoint(), edge.sourceEndpoint(), edge.targetEndpoint() are undefined. Why?
  // console.log('_addEdge', p1, p2, e.midpoint(), e.sourceEndpoint(), e.targetEndpoint())
  const color = edge.data('color')
  const midpoint = {
    x: (p1.x + p2.x) / 2,
    y: (p1.y + p2.y) / 2
  }
  // console.log('_addEdge', edge.id(), midpoint, color)
  // create aux node to represent edge
  const auxNode = cy.add({
    // Note: the aux node ID is generated by Cytoscape (string). IDs of aux nodes are not relevant to the renderer.
    // The renderer recognizes an aux node by having "assocId" data.
    data: {
      assocId: eleId(edge),               // holds original edge ID. Needed by context menu.
      color
    },
    position: midpoint
  })
  edge.data('auxNodeId', auxNode.id())    // set back link; auxNodeId is of type string
  // })
}

function eventHandlers (cy) {
  if (!events) {
    // console.log('eventHandlers')
    // Note: for edge connecting edges aux node position changes do cascade.
    // So the position event selector must capture both aux nodes and regular nodes.
    cy.on('position', 'node', e => repositionAuxNodes(e.target))
    cy.on('remove', 'edge[color]', e => removeAuxNode(e.target))    // remove aux node when removing edge
    events = true
  }
}

function repositionAuxNodes (node) {
  node.connectedEdges('edge[color]').forEach(edge => {
    edge.auxNode().position(edge.midpoint())
  })
}

function removeAuxNode (edge) {
  edge.auxNode().remove()
}

/**
 * Builds a Cytoscape edge from a dm5.ViewAssoc
 *
 * Prerequisite: viewAssoc has 2 topic players specified by-ID. ### FIXDOC
 *
 * @param   viewAssoc   A dm5.ViewAssoc
 */
function cyEdge (viewAssoc, id1, id2) {
  return {
    data: {
      id:      viewAssoc.id,
      typeUri: viewAssoc.typeUri,   // TODO: needed?
      label:   viewAssoc.value,
      color:   viewAssoc.getColor(),
      source:  id1,
      target:  id2,
      viewAssoc
    }
  }
}

/**
 * @return    the ID of the node that represents the given player.
 *            For a topic player that is the topic ID (number), for an assoc player
 *            that is the ID of the assoc's aux node (string).
 */
function nodeId (cy, player) {
  const playerId = player.id
  if (player.isTopicPlayer()) {
    return playerId
  }
  const edge = cy.getElementById(playerId.toString())
  if (edge.size() !== 1) {
    throw Error(`Edge ${playerId} not in graph`)
  }
  return auxNodeId(edge)
}

/**
 * Prerequisite: "this" refers to an edge.
 *
 * @return  the aux node (a one-element Cytoscape collection) that represents the given edge.
 */
function auxNode () {
  const edge = this
  if (!edge || !edge.isEdge()) {
    throw Error(`auxNode() expects to be called on an edge, but called on ${JSON.stringify(edge)}`)
  }
  const auxNode = edge.cy().getElementById(auxNodeId(edge))
  if (auxNode.size() !== 1) {
    throw Error(`No aux node for edge ${edge.id()}`)
  }
  return auxNode
}

/**
 * @return  the ID (string) of the aux node of the given edge.
 */
function auxNodeId (edge) {
  const auxNodeId = edge.data('auxNodeId')
  if (!auxNodeId) {
    throw Error(`Edge ${edge.id()} has no "auxNodeId" data`)
  }
  return auxNodeId
}

function eleId (ele) {
  // Note: cytoscape element IDs are strings
  return Number(ele.id())
}
