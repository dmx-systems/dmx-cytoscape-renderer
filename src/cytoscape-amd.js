// import Vue from 'vue'

export default function register (cytoscape) {

  let events = false    // tracks event handler registration

  cytoscape('core', 'addEdge', addEdge)

  function addEdge (edge) {
    console.log('addEdge', edge)
    eventHandlers(this)
    if (Array.isArray(edge)) {
      edge.forEach(edge => _addEdge(this, edge))
    } else {
      _addEdge(this, edge)
    }
  }

  function _addEdge (cy, edge) {
    const _edge = cy.add(edge)
    const p1 = cy.getElementById(_edge.data("source")).position()
    const p2 = cy.getElementById(_edge.data("target")).position()
    // Vue.nextTick(() => {
    // const e = cy.getElementById(_edge.id())
    // x,y of _edge.midpoint(), _edge.sourceEndpoint(), _edge.targetEndpoint() are undefined. Why?
    // console.log('_addEdge', p1, p2, e.midpoint(), e.sourceEndpoint(), e.targetEndpoint())
    const color = _edge.data('color')
    const midpoint = {
      x: (p1.x + p2.x) / 2,
      y: (p1.y + p2.y) / 2
    }
    // console.log('_addEdge', _edge.id(), midpoint, color)
    const auxNode = cy.add({
      // Note: the aux node ID is generated by Cytoscape. IDs of aux nodes are not relevant to the renderer.
      // The renderer recognizes an aux node by having "assocId" data.
      data: {
        assocId: _edge.id(),    // holds original edge ID. Needed by context menu.
        color
      },
      position: midpoint
    })
    _edge.data('nodeId', auxNode.id())    // bidirectional linking
    // })
  }

  function eventHandlers (cy) {
    console.log('eventHandlers')
    if (!events) {
      cy.on('position', position)
      events = true
    }
  }

  function position (e) {
    const node = e.target
    if (!node.isNode()) {
      throw Error('Unexpected poistion event target')
    }
    // reposition aux nodes
    node.connectedEdges().forEach(edge => {
      e.cy.getElementById(edge.data('nodeId')).position(edge.midpoint())
    })
  }
}
